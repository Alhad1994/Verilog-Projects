// Code your design here
// Code your design here

module traffic(p1,p2,clk,rst,state,a,b,c,d,led1,led2,x,y);
output [9:0] state;
output [2:0] a,b,c,d,led1,led2;
  
input rst,clk;
input p1,p2;
wire clk;
reg [9:0]state;
reg [2:0]a,b,c,d,led1,led2;
wire rst;
reg x,y;
output x,y;
 
parameter
s1 = 10'b1111000001,
  
s2 = 10'b0000000010,

s3a = 10'b1000000100,
s3b = 10'b1100000100,
s3c = 10'b1110000100,
s3d = 10'b1111000100,

s4 = 10'b0000001000,
s5 = 10'b0000010000,
  
s6a = 10'b1000100000,
s6b = 10'b1100100000,
s6c = 10'b1110100000,
s6d = 10'b0000100001,
s6e = 10'b0000100011,
  
s6 = 10'b0000100000,

s7 = 10'b0001000000,

s8 = 10'b0010000000,
  
s9 = 10'b0100000000,
s10 = 10'b1000000000;
  
reg[3:0] count;

localparam
sec1 = 4'd1,
sec2 = 4'd2,
sec3 = 4'd3,
sec4 = 4'd4,
sec6 = 4'd6;




// create a binary counter
	reg [31:0] cnt; // 32-bit counter
initial begin
x<=0;
y<=0;
end
initial begin

cnt <= 32'h00000000; // start at zero

end

always @(posedge clk) begin

cnt <= cnt + 1; // count up

end

always @ (*)
begin
	if(p1==0)
		begin 
			x=1;
		end
		else if (state == s3a)
		begin
		x=0;
		end
		
	if(p2==0)
		begin
			y=1;
		end 
		else if(state ==s6a)
		begin
		y=0;
		end
end

always @ (posedge cnt[25] or negedge rst) begin

       if (rst == 0)begin
                state = s1;
                count = 0;
          
                    end
       else    
                begin
                case(state)

                  
                s1 : begin
                        if(count < sec2)begin
                                state <= s1;
                                count <= count +1;
                        end
                        else begin
                                        state <= s2;
                                         count <=1;
                                end
                        end
                  
                s2 : begin
                        if(count < sec1)
                          begin
                                state <= s2;
                                count <= count +1;
                          end//if
                       
                  		else 
                          begin
                          		if(x==1)
                            			begin
                              					state <= s3a;
                            					count <=1;
                               			end
              
                            else 
                                  	begin
                            		state<= s3d;
                  				end
                            
                          end //main else
                  
                        end   //state begin

                s3a : begin
                
                      if(count < sec3)
                       begin
                       state <= s3a;
                       count <= count +1;
                        end  //if
                  
                      else
                        begin
                          state <= s3b;
                          count <=1;
								 // x<=0;
                         
                    end //else
                    end
                      
                  
                s3b: begin
                 
                   
                  if(count < sec1)
                        begin
                       state <= s3b;
                       count <= count +1;
                        end  //if
                      else
                        begin
                          state <= s3c;
                          count <=1;
                    end
                end //begin
                      
                      
                  
                s3c: begin
                 
                   
                  if(count < sec1)
                        begin
                       state <= s3c;
                       count <= count +1;
                        end  //if
                      else
                        begin
                          state <= s4;
                          count <=1;
                    end
                end //begin
                      
                      
                s3d : begin
                  if(count < sec6)
                        begin
                       state <= s3d;
                       count <= count +1;
                        end  //if
                      else
                        begin
                          state <= s4;
                          count <=1;
                    end
                end
                        
  
                s4 :begin
                        if(count < sec2)begin
                                state <= s4;
                                count <= count +1;
                        end
                        else begin
                                        state <= s5;
                                         count <=1;
                                end
                        end


                s5 : begin
                        if(count < sec1)begin
                                state <= s5;
                                count <= count +1;
                        end
                      else 
                          begin
                            if(y==1)
                            			
                                						begin
                            								state <= s6a;
                            								count <=1;
                                						end
                                        
                          		else 
                                  	begin
                            		state<= s6;
                  				end
                            
                          end//main else
                  
                        end   //state begin


                s6a: begin
                
                  if(count < sec1)
                       begin
                       state <= s6a;
                       count <= count +1;
                        end  //if
                  
                      else
                        begin
                          state <= s6b;
                          count <=1;
                         //y<=0;
                    end//else
                   
                    end
                      
                  
                s6b: begin
                 
                   
                  if(count < sec1)
                        begin
                       state <= s6b;
                       count <= count +1;
                        end  //if
                      else
                        begin
                          state <= s6c;
                          count <=1;
                    end
                end //begin
                      
                      
                  
                s6c: begin
                 
                   
                  if(count < sec1)
                        begin
                       state <= s6c;
                       count <= count +1;
                        end  //if
                      else
                        begin
                          state <= s6d;
                          count <=1;
                    end
                end//begin
                  
                   
                s6d: begin
                 
                   
                  if(count < sec1)
                        begin
                       state <= s6d;
                       count <= count +1;
                        end  //if
                      else
                        begin
                          state <= s6e;
                          count <=1;
                    end
                end//begin
                  
                   
                s6e: begin
                 
                   
                  if(count < sec2)
                        begin
                       state <= s6e;
                       count <= count +1;
                        end  //if
                      else
                        begin
                          state <= s9;
                          count <=1;
                    end
                end//begin
                  
                  
                      
                s6 :begin   //main flow
                        if(count < sec1)
                          begin
                                state <= s6;
                                count <= count +1;
                          end
 						 else
                           begin
                                        state <= s7;
                                         count <=1;
                           end
                        end


                s7 :begin
                        if(count < sec1)
                          begin
                                state <= s7;
                                count <= count +1;
                          end
                          	
                  			else 
                                  	begin
                            		state<= s8;
                  				end
                  
                        end   //state begin
   
                        
                s8 :begin
                        if(count < sec4)begin
                                state <= s8;
                                count <= count +1;
                        end
                        else begin
                                        state <= s9;
                                         count <=1;
                                end
                        end


                s9 :begin
                        if(count < sec2)begin
                                state <= s9;
                                count <= count +1;
                        end
                        else begin
                                        state <= s10;
                                         count <=1;
                                end
                        end


                s10 :begin
                        if(count < sec1)begin
                                state <= s10;
                                count <= count +1;
                        end
                             
                          		else 
                                  	begin
                            		state<= s1;
                  				end
                            
                       
                  
                        end   //state begin

 default : begin
                                        state <=s1;
                                  end

endcase
end //else
end //always

always @ (*) begin

        case(state)
          
          	   
          
                s1 : begin a <=3'b100; b <= 3'b010; c <= 3'b001; d <=3'b100;led1 <=3'b100;led2 <=3'b100; end

                
          		s2:begin a <=3'b100; b <= 3'b100; c <= 3'b001; d <=3'b100;led1 <=3'b100;led2 <=3'b100; end

                
          		s3a:begin a <=3'b001; b <= 3'b100; c <= 3'b001; d <=3'b100; led1 <=3'b001;led2 <=3'b100; end

				s3b:begin a <=3'b001; b <= 3'b100; c <= 3'b001; d <=3'b100; led1 <=3'b010;led2 <=3'b100; end

          		s3c:begin a <=3'b001; b <= 3'b100; c <= 3'b001; d <=3'b100; led1 <=3'b100;led2 <=3'b100; end

				s3d:begin a <=3'b001; b <= 3'b100; c <= 3'b001; d <=3'b100; led1 <=3'b100;led2 <=3'b100; end

                
          		s4:begin a <=3'b001; b <= 3'b100; c <= 3'b010; d <=3'b100; led1 <=3'b100;led2 <=3'b100; end

                s5:begin a <=3'b010; b <= 3'b100; c <= 3'b100; d <=3'b100; led1 <=3'b100;led2 <=3'b100; end


          
          		s6a :begin a <=3'b010; b <= 3'b100; c <= 3'b100; d <=3'b100; led1 <=3'b100;led2 <=3'b001; end

				s6b :begin a <=3'b100; b <= 3'b100; c <= 3'b100; d <=3'b001; led1 <=3'b100;led2 <=3'b001; end

          		s6c :begin a <=3'b100; b <= 3'b001; c <= 3'b100; d <=3'b001; led1 <=3'b100;led2 <=3'b001; end

	            s6d :begin a <=3'b100; b <= 3'b001; c <= 3'b100; d <=3'b001; led1 <=3'b100;led2 <=3'b010; end
          
          		s6e :begin a <=3'b100; b <= 3'b001; c <= 3'b100; d <=3'b001; led1 <=3'b100;led2 <=3'b100; end
          
          		s6 :begin a <=3'b010; b <= 3'b100; c <= 3'b100; d <=3'b001; led1 <=3'b100;led2 <=3'b100; end

      
          		s7:begin a <=3'b100; b <= 3'b100; c <= 3'b100; d <=3'b001; led1 <=3'b100;led2 <=3'b100; end
          

                s8:begin a <=3'b100; b <= 3'b001; c <= 3'b100; d <=3'b001; led1 <=3'b100;led2 <=3'b100; end

               
          		s9:begin a <=3'b100; b <= 3'b001; c <= 3'b100; d <=3'b010; led1 <=3'b100;led2 <=3'b100; end

          
                s10 : begin a <=3'b100; b <= 3'b001; c <= 3'b100; d <=3'b100; led1 <=3'b100;led2 <=3'b100; end
          
          
          		
                default: begin a <=3'b100; b <= 3'b010; c <= 3'b001; d <=3'b100; led1 <=3'b100;led2 <=3'b100; end

endcase
end //always


endmodule
                                                                                                                                                                                                 


